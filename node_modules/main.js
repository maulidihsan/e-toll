// register the grid component
Vue.component('entrance', {
    template: '#entrance-template',
    props: {
      data: Array,
      columns: Array,
      filterKey: String
    },
    data: function () {
      var sortOrders = {}
      this.columns.forEach(function (key) {
        sortOrders[key] = 1
      })
      return {
        sortKey: '',
        sortOrders: sortOrders
      }
    },
    computed: {
      filteredData: function () {
        var sortKey = this.sortKey
        var filterKey = this.filterKey && this.filterKey.toLowerCase()
        var order = this.sortOrders[sortKey] || 1
        var data = this.data
        if (filterKey) {
          data = data.filter(function (row) {
            return Object.keys(row).some(function (key) {
              return String(row[key]).toLowerCase().indexOf(filterKey) > -1
            })
          })
        }
        if (sortKey) {
          data = data.slice().sort(function (a, b) {
            a = a[sortKey]
            b = b[sortKey]
            return (a === b ? 0 : a > b ? 1 : -1) * order
          })
        }
        return data
      }
    },
    filters: {
      capitalize: function (str) {
        return str.charAt(0).toUpperCase() + str.slice(1)
      }
    },
    methods: {
      sortBy: function (key) {
        this.sortKey = key
        this.sortOrders[key] = this.sortOrders[key] * -1
      }
    }
  })

  Vue.component('exit', {
    template: '#exit-template',
    props: {
      data: Array,
      columns: Array,
      filterKey: String
    },
    data: function () {
      var sortOrders = {}
      this.columns.forEach(function (key) {
        sortOrders[key] = 1
      })
      return {
        sortKey: '',
        sortOrders: sortOrders
      }
    },
    computed: {
      filteredData: function () {
        var sortKey = this.sortKey
        var filterKey = this.filterKey && this.filterKey.toLowerCase()
        var order = this.sortOrders[sortKey] || 1
        var data = this.data
        if (filterKey) {
          data = data.filter(function (row) {
            return Object.keys(row).some(function (key) {
              return String(row[key]).toLowerCase().indexOf(filterKey) > -1
            })
          })
        }
        if (sortKey) {
          data = data.slice().sort(function (a, b) {
            a = a[sortKey]
            b = b[sortKey]
            return (a === b ? 0 : a > b ? 1 : -1) * order
          })
        }
        return data
      }
    },
    filters: {
      capitalize: function (str) {
        return str.charAt(0).toUpperCase() + str.slice(1)
      }
    },
    methods: {
      sortBy: function (key) {
        this.sortKey = key
        this.sortOrders[key] = this.sortOrders[key] * -1
      }
    }
  })

  
  // bootstrap the demo
  var report = new Vue({
    el: '#report',
    data: {
      searchQuery: '',
      gridColumns: ['nopol', 'gerbang', 'timestamp'],
      entranceData: [
      ],
      exitData: [
      ]
    },
    mounted (){
      axios.get('/report')
        .then(response => {
          this.entranceData = response.data.log.filter(item => item.waktu_masuk).map(data => {
            return {nopol: data.kendaraan.nopol, gerbang: data.gerbang_masuk.nama, timestamp: moment(Number(data.waktu_masuk)).format("DD-MM-YYYY HH:mm:ss")}
          });
          this.exitData = response.data.log.filter(item => item.waktu_keluar).map(data => {
            return {nopol: data.kendaraan.nopol, gerbang: data.gerbang_keluar.nama, timestamp: moment(Number(data.waktu_keluar)).format("DD-MM-YYYY HH:mm:ss")}
          });
        })
        .catch(err => {console.log(err); alert('cant fetch data')});
    }
  })
  var socket = io();
  socket.on('report', function(data){
    let insert = {
      nopol: data.kendaraan.nopol,
      gerbang: data.gerbang.nama,
      timestamp: moment(Number(data.ts)).format("DD-MM-YYYY HH:mm:ss")
    }
    if(data.event == 'masuk'){
      report.entranceData.unshift(insert);
    }
    else if(data.event == 'keluar'){
      report.exitData.unshift(insert);
    }
  });
  